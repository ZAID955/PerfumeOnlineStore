// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerfumeOnlineStore_Core.Models.Context;

#nullable disable

namespace PerfumeOnlineStore_Core.Migrations
{
    [DbContext(typeof(PerfumeOnlineStoreDbContext))]
    [Migration("20240510225349_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 173, DateTimeKind.Local).AddTicks(7921));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 173, DateTimeKind.Local).AddTicks(9727));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", null, t =>
                        {
                            t.HasCheckConstraint("CH_CartItem_Quantity", "Quantity >= 0");

                            t.HasCheckConstraint("CH_CartItem__Note", "LEN(Note) >0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 174, DateTimeKind.Local).AddTicks(3770));

                    b.Property<float>("DelievryPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(3f);

                    b.Property<int>("DeliveryCity")
                        .HasColumnType("int");

                    b.Property<float>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<float>("NetPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("PromoCodeId");

                    b.ToTable("Orders", null, t =>
                        {
                            t.HasCheckConstraint("CH_Order__Address", "LEN(Address) >0 ");

                            t.HasCheckConstraint("Ch_Order_DelievryPrice", "DelievryPrice>=3");

                            t.HasCheckConstraint("Ch_Order_DiscountAmount", "DiscountAmount>=0");

                            t.HasCheckConstraint("Ch_Order_NetPrice", "NetPrice>=0");

                            t.HasCheckConstraint("Ch_Order_TaxAmount", "TaxAmount>=0");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.OrderUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 177, DateTimeKind.Local).AddTicks(1043));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderUsers", (string)null);
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 174, DateTimeKind.Local).AddTicks(6769));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Packages", null, t =>
                        {
                            t.HasCheckConstraint("CH_Package_Quantity", "Quantity >= 0");

                            t.HasCheckConstraint("CH_Package__Description", "LEN(Description) > 0 ");

                            t.HasCheckConstraint("CH_Package__Price", "LEN(Price) > 0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.PackageProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 174, DateTimeKind.Local).AddTicks(9629));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.ToTable("PackageProductes", null, t =>
                        {
                            t.HasCheckConstraint("CH_Package_Quantity", "Quantity >= 0")
                                .HasName("CH_Package_Quantity1");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 175, DateTimeKind.Local).AddTicks(1769));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("SizeUnite")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Productes", null, t =>
                        {
                            t.HasCheckConstraint("CH_Product_Quantity_CH", "Quantity >= 0");

                            t.HasCheckConstraint("CH_Product__Description", "LEN(Description) > 0 ");

                            t.HasCheckConstraint("CH_Product__Price", "LEN(Price) > 0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 176, DateTimeKind.Local).AddTicks(2593));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductBrands", null, t =>
                        {
                            t.HasCheckConstraint("CH_UserType__Name", "LEN(Name) >0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.ProductSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 176, DateTimeKind.Local).AddTicks(4666));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductSections", null, t =>
                        {
                            t.HasCheckConstraint("CH_ProductSection__Name", "LEN(Name) >0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 176, DateTimeKind.Local).AddTicks(6645));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Size")
                        .IsUnique();

                    b.ToTable("ProductSizes", null, t =>
                        {
                            t.HasCheckConstraint("CH_ProductSize_Size", "Size >= 0");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 176, DateTimeKind.Local).AddTicks(8799));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductTypes", null, t =>
                        {
                            t.HasCheckConstraint("CH_ProductType__Name", "LEN(Name) >0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeActive")
                        .HasColumnType("datetime2");

                    b.Property<float>("DiscountAmount")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 175, DateTimeKind.Local).AddTicks(5054));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviewes", null, t =>
                        {
                            t.HasCheckConstraint("CH_Review_Rating", "Rating BETWEEN 1 AND 5");

                            t.HasCheckConstraint("CH_Review__Comment", "LEN(Comment) > 0 ");

                            t.HasCheckConstraint("CH_Review__Title", "LEN(Title) > 0 ");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Brithday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CompanyCity")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 175, DateTimeKind.Local).AddTicks(7543));

                    b.Property<string>("DeliveryCar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryLicenseImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("True");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Gendear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalNo")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("False");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CH_User_Email", "Email LIKE '%@gmail.com%' OR Email LIKE  '%@outlook.com%' OR Email LIKE '%@yahoo.com%'");

                            t.HasCheckConstraint("CH_User_NationalNo", "LEN([NationalNo]) = (10) OR NationalNo IS NULL");

                            t.HasCheckConstraint("CH_User_Password", "LEN(Password) >= 8 AND LEN(Password) <= 16");

                            t.HasCheckConstraint("CH_User_PhoneNumber", "(LEN([PhoneNumber])=(10) AND ([PhoneNumber] LIKE '079%' OR [PhoneNumber] LIKE '078%' OR [PhoneNumber] LIKE '077%'))");

                            t.HasCheckConstraint("CK_User_ConfirmPassword", "(Password = ConfirmPassword)");
                        });
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.UserProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 10, 15, 53, 49, 174, DateTimeKind.Local).AddTicks(2093));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProducts", (string)null);
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Cart", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.CartItem", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Package", "Package")
                        .WithMany("CartItems")
                        .HasForeignKey("PackageId");

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Package");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Order", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("PerfumeOnlineStore_Core.Models.Entites.Order", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.Navigation("Cart");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.OrderUser", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Order", "Order")
                        .WithMany("OrderUser")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.User", "User")
                        .WithMany("OrderUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.PackageProduct", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Package", "Package")
                        .WithMany("PackageProduct")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Product", "Product")
                        .WithMany("PackageProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Product", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.ProductSection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.ProductSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.ProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("Section");

                    b.Navigation("Size");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Review", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Package", "Package")
                        .WithMany("Review")
                        .HasForeignKey("PackageId");

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Product", "Product")
                        .WithMany("Review")
                        .HasForeignKey("ProductId");

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.User", "User")
                        .WithMany("Review")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.UserProduct", b =>
                {
                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeOnlineStore_Core.Models.Entites.User", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Order", b =>
                {
                    b.Navigation("OrderUser");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Package", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("PackageProduct");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("PackageProduct");

                    b.Navigation("Review");

                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("PerfumeOnlineStore_Core.Models.Entites.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderUser");

                    b.Navigation("Review");

                    b.Navigation("UserProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
